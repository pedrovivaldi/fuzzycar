FUNCTION_BLOCK fuzzyCar

// Define input variables
VAR_INPUT				
	position_error : REAL;
	orientation : REAL;
END_VAR

// Define output variable
VAR_OUTPUT				
	wheel : REAL;
END_VAR

FUZZIFY position_error
        TERM ri := (-1000, 1) (-100, 1) (-40, 0);
        TERM rc := (-70, 0) (-40, 1) (-5, 0);
        TERM ce := (-10, 0) (0, 1) (10, 0);
        TERM lc := (5, 0) (40, 1) (70, 0);
        TERM le := (40, 0) (100, 1) (1000, 1);
END_FUZZIFY

(*FUZZIFY position			
	TERM le := (0, 1) (10, 1) (30, 0); 
	TERM lc := (25, 0) (40, 1) (50, 0);
	TERM ce := (45, 0) (50, 1) (55, 0);
        TERM rc := (50, 0) (60, 1) (70, 0);
        TERM ri := (55, 0) (90, 1) (300, 1);
END_FUZZIFY*)

FUZZIFY orientation			
	TERM rb := (-360, 0) (-45, 1) (15, 0) ;
	TERM ru := (-15, 0) (30, 1) (60, 0);
        TERM rv := (45, 0) (70, 1) (90, 0);
        TERM ve := (75, 0) (90, 1) (105, 0);
        TERM lv := (90, 0) (110, 1) (140, 0);
        TERM lu := (130, 0) (160, 1) (195, 0);
        TERM lb := (175, 0) (225, 1) (360, 0);
END_FUZZIFY

DEFUZZIFY wheel			
	TERM nb := (-30, 1) (-15, 0);
	TERM nm := (-25, 0) (-15, 1) (-5, 0);
	TERM ns := (-12, 0) (-5, 1) (0, 0);
        TERM ze := (-5, 0) (0, 1) (5, 0);
        TERM ps := (0, 0) (7, 1) (13, 0);
        TERM pm := (5, 0) (15, 1) (25, 0);
        TERM pb := (17, 0) (30, 1);

	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

// Inference rules
RULEBLOCK No1
	AND : MIN;	// Use 'min' for 'and'
	ACT : MIN;	// Use 'min' activation method
	ACCU : MAX;	// Use 'max' accumulation method

	RULE 1 : IF position_error IS le AND orientation IS rb THEN wheel IS ps;
	RULE 2 : IF position_error IS le AND orientation IS ru THEN wheel IS ns;
	RULE 3 : IF position_error IS le AND orientation IS rv THEN wheel IS nm;
	RULE 4 : IF position_error IS le AND orientation IS ve THEN wheel IS nm;
	RULE 5 : IF position_error IS le AND orientation IS lv THEN wheel IS nb;
	RULE 6 : IF position_error IS le AND orientation IS lu THEN wheel IS nb;
	RULE 7 : IF position_error IS le AND orientation IS lb THEN wheel IS nb;

	RULE 8 : IF position_error IS lc AND orientation IS rb THEN wheel IS pm;
	RULE 9 : IF position_error IS lc AND orientation IS ru THEN wheel IS ps;
	RULE 10 : IF position_error IS lc AND orientation IS rv THEN wheel IS ns;
	RULE 11 : IF position_error IS lc AND orientation IS ve THEN wheel IS nm;
	RULE 12 : IF position_error IS lc AND orientation IS lv THEN wheel IS nm;
	RULE 13 : IF position_error IS lc AND orientation IS lu THEN wheel IS nb;
	RULE 14 : IF position_error IS lc AND orientation IS lb THEN wheel IS nb;

	RULE 15 : IF position_error IS ce AND orientation IS rb THEN wheel IS pm;
	RULE 16 : IF position_error IS ce AND orientation IS ru THEN wheel IS pm;
	RULE 17 : IF position_error IS ce AND orientation IS rv THEN wheel IS ps;
	RULE 18 : IF position_error IS ce AND orientation IS ve THEN wheel IS ze;
	RULE 19 : IF position_error IS ce AND orientation IS lv THEN wheel IS ns;
	RULE 20 : IF position_error IS ce AND orientation IS lu THEN wheel IS nm;
	RULE 21 : IF position_error IS ce AND orientation IS lb THEN wheel IS nm;

	RULE 22 : IF position_error IS rc AND orientation IS rb THEN wheel IS pb;
	RULE 23 : IF position_error IS rc AND orientation IS ru THEN wheel IS pb;
	RULE 24 : IF position_error IS rc AND orientation IS rv THEN wheel IS pm;
	RULE 25 : IF position_error IS rc AND orientation IS ve THEN wheel IS pm;
	RULE 26 : IF position_error IS rc AND orientation IS lv THEN wheel IS ps;
	RULE 27 : IF position_error IS rc AND orientation IS lu THEN wheel IS ns;
	RULE 28 : IF position_error IS rc AND orientation IS lb THEN wheel IS nm;

	RULE 29 : IF position_error IS ri AND orientation IS rb THEN wheel IS pb;
	RULE 30 : IF position_error IS ri AND orientation IS ru THEN wheel IS pb;
	RULE 31 : IF position_error IS ri AND orientation IS rv THEN wheel IS pb;
	RULE 32 : IF position_error IS ri AND orientation IS ve THEN wheel IS pm;
	RULE 33 : IF position_error IS ri AND orientation IS lv THEN wheel IS pm;
	RULE 34 : IF position_error IS ri AND orientation IS lu THEN wheel IS ps;
	RULE 35 : IF position_error IS ri AND orientation IS lb THEN wheel IS ns;
	
        END_RULEBLOCK

END_FUNCTION_BLOCK